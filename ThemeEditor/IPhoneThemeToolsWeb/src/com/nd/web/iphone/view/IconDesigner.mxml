<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
		   xmlns:ndView="com.nd.web.iphone.view.*"
		   width="550"
		   height="700"
		   borderStyle="solid"
		   cornerRadius="10"
		   borderColor="#000000"
		   creationComplete="init();"
		   fontSize="12">
	<mx:Script>
		<![CDATA[
			import com.nd.web.iphone.event.GetIconTypeEvent;
			import com.nd.web.iphone.event.GetIconsEvent;
			import mx.events.FlexEvent;
			import com.nd.web.iphone.event.GetIconsEvent;
			import mx.events.ListEvent;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.nd.web.iphone.event.ImageChangeEvent;
			import mx.binding.utils.BindingUtils;
			import com.nd.web.iphone.util.ImageUtil;
			import mx.events.SliderEvent;
			import com.nd.web.iphone.model.ThemeModelLocator;
			import mx.containers.ViewStack;
			import com.nd.web.iphone.view.component.ScaleEvent;
			import com.nd.web.iphone.view.component.PictureCanvas;
			import com.nd.web.iphone.view.component.LoadingControl;
			[Bindable]
			private var picCanvas:PictureCanvas;
			private var file:FileReference;
			private var loader:Loader;
			private var canvasMask:Sprite=new Sprite();
			[Bindable]
			private var model:ThemeModelLocator=ThemeModelLocator.getInstance();

			/**
			 * 初始化界面和事件
			 */
			private function init():void
			{
				//初始化图片界面
				picCanvas=new PictureCanvas();
				picCanvas.x=10;
				picCanvas.y=10;
				this.rawChildren.addChild(picCanvas);
				picCanvas.Relayout(410, 600);
				//加载图片
				picCanvas.LoadPicture(model.curEditIcon.sourceBmd.bitmapData);
				//设置标准图标尺寸选择器
				picCanvas.SetSelectorSize(model.curEditIcon.width, model.curEditIcon.heigh);
				//遮罩层，防止图片过大超过编辑区
				picCanvas.mask=canvasMask;
				this.rawChildren.addChild(canvasMask);
				canvasMask.graphics.clear();
				canvasMask.graphics.beginFill(0xff0000, 1);
				canvasMask.graphics.drawRect(0, 0, 410, 600);
				canvasMask.graphics.endFill();
				//响应画布缩放事件，通知控制条改变值
				picCanvas.addEventListener(ScaleEvent.SCALE_CHANGED, function(e:ScaleEvent):void
					{
						bottomBarView.picScaleHs.value=e.CurrentScale;
					});
				//文件选择添加事件
				file=new FileReference();
				file.addEventListener(Event.COMPLETE, fileHandler);
				file.addEventListener(Event.SELECT, fileHandler);
				loader=new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loaderComplete);
				//切换到在线图标事件
				toolbarView.onlineBtn.addEventListener(MouseEvent.CLICK, goToOnlineThemeHandler);
				//清除特效
				toolbarView.clearEffectBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("");
					});
				//模糊效果事件
				toolbarView.blurBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("blur");
					});
				//灰度效果事件
				toolbarView.grayBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("gray");
					});
				//浮雕效果事件
				toolbarView.embossBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("emboss");
					});
				//底片效果事件
				toolbarView.filmBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("film");
					});
				//素描效果事件
//				toolbarView.charcoalBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
//					{
//						picCanvas.SetEffect("charcoal");
//					});
				//雪花效果事件
				toolbarView.noiseBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("noise");
					});
				//马赛克效果事件
				toolbarView.mosaicBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("mosaic");
					});
				//老照片效果事件
				toolbarView.oldphotoBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetEffect("old");
					});
				//向左旋转事件
				toolbarView.turnLeftBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.LeftRotate();
					});
				//向右旋转事件
				toolbarView.turnRightBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.RightRotate();
					});
				//水平翻转事件
				toolbarView.turnHorBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.HorizontalRotate();
					});
				//垂直翻转事件
				toolbarView.turnVerBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.VerticalRotate();
					});
				//剪切事件
				toolbarView.cutBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.ShowSelector(true);
					});
				//拖移事件
				toolbarView.dragBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.ShowSelector(false);
					});
				//控制条值改变事件
				bottomBarView.picScaleHs.addEventListener(SliderEvent.CHANGE, function(e:SliderEvent):void
					{
						picCanvas.ScalePicture(bottomBarView.picScaleHs.value);
					});
				//设置图片实际大小事件
				bottomBarView.realSizeBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetRealSize();
					});
				//设置图片适合大小事件
				bottomBarView.aproposeSizeBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.SetAproposSize();
					});
				// 还原默认图片事件
				bottomBarView.restoreDefBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						model.curEditIcon.sourceBmd=new model.assets[model.curEditIcon.name + "Icon"] as Bitmap;
						picCanvas.LoadPicture(model.curEditIcon.sourceBmd.bitmapData);
					});

				// 还原图片事件
				bottomBarView.restorePicBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						picCanvas.RestorePicture();
					});
				//打开文件事件
				bottomBarView.openFileBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						file.browse(new Array(new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png")));
					});
				//返回事件
				bottomBarView.returnBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						ViewStack(parent).selectedIndex=0;
					});
				//监听图片改变事件
				picCanvas.addEventListener(ImageChangeEvent.IMAGE_CHANGE, function():void
					{
						model.curEditIcon.sourceBmd=picCanvas.pictureBitmap;
					});

			}

			/**
			 * 打开本地图片
			 */
			private function fileHandler(e:Event):void
			{
				var fileOpen:FileReference=e.target as FileReference;
				switch (e.type)
				{
					case Event.SELECT:
						fileOpen.load(); //仅在flash player10中支持
						break;
					case Event.COMPLETE:
						loader.loadBytes(fileOpen.data); //仅在flash player10中支持
						break;
				}
			}

			/**
			 * 图片读取完毕，载入图片
			 */
			private function loaderComplete(e:Event):void
			{
				var loader:Loader=Loader(e.target.loader);
				var bmpData:BitmapData=Bitmap(loader.content).bitmapData;
				this.picCanvas.LoadPicture(bmpData);
			}

			/**
			 * 改变当前修改图片
			 */
			public function changeEditPicture():void
			{
				if (picCanvas != null)
				{
					picCanvas.LoadPicture(model.curEditIcon.sourceBmd.bitmapData);
					picCanvas.SetSelectorSize(model.curEditIcon.width, model.curEditIcon.heigh);
				}
			}

			/**
			 * 初始化initWallpaperTypeView
			 */
			private var isIconTypeCreationComplete:Boolean=false;

			private function initIconTypeView():void
			{
				isIconTypeCreationComplete=true;
				if (model.curIconTypeState == 0)
				{
					model.iconTypeList=model.wallpaperTypeList;
					iconTypeView.iconTypeInfoText.text='在线壁纸分类';
				}
				else
				{
					model.iconTypeList=model.appIconList;
					iconTypeView.iconTypeInfoText.text='应用图标分类';
				}

				//监听返回工具栏按钮
				iconTypeView.toolbarBtn.addEventListener(MouseEvent.CLICK, function():void
					{
						model.curToolbarIndex=0;
					});
				//监听分类点击事件
				iconTypeView.iconTypeTL.addEventListener(ListEvent.ITEM_CLICK, function(event:ListEvent):void
					{
						//如果处于壁纸状态
						if (model.curIconTypeState == 0)
						{
							model.curOnlineWallpaperState=0;
							//若wallpaperAndIconView与初始化，则根据资源类型初始化界面信息
							if (wallpaperAndIconView != null && wallpaperAndIconView.wallpaperTypeBtn != null)
							{
								wallpaperAndIconView.initBarView();
							}
							model.curWallpaperType=event.itemRenderer.data.c_id;
							model.curToolbarIndex=2;
							wallpaperAndIconView.sendWallpaperPageRequest(1);

						}
						//如果处于应用图标分类状态
						else if (model.curIconTypeState == 1)
						{
							//若wallpaperAndIconView与初始化，则根据资源类型初始化界面信息
							if (wallpaperAndIconView != null && wallpaperAndIconView.wallpaperTypeBtn != null)
							{
								wallpaperAndIconView.initBarView();
								model.curAppIconType=event.itemRenderer.data.CID;
								model.curToolbarIndex=2;
								wallpaperAndIconView.sendTypeIconPageRequest(1);
							}
						}
					});
				//监听搜索按钮被点击事件
				iconTypeView.searchBtn.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void
					{
						searchWallpaperByKeyword();
					});

				iconTypeView.keywordText.addEventListener(FlexEvent.ENTER, function(event:FlexEvent):void
					{
						searchWallpaperByKeyword();
					});
			}

			/**
			 * 搜索关键字壁纸
			 */
			private function searchWallpaperByKeyword():void
			{
				if (iconTypeView.keywordText.text == '')
				{
					iconTypeView.errorInfoLabel.visible=true;
				}
				else
				{
					model.curOnlineWallpaperState=1;
					iconTypeView.errorInfoLabel.visible=false;
					model.curWallpaperKeyword=iconTypeView.keywordText.text;
					wallpaperAndIconView.sendKeywordWallpaperPageRequest(1);
					model.curToolbarIndex=2;
				}
			}

			/**
			 * 初始化WallpaperView
			 */
			private function initWallpaperAndIconView():void
			{
				//监听返回分类按钮
				wallpaperAndIconView.wallpaperTypeBtn.addEventListener(MouseEvent.CLICK, function():void
					{
						if (model.curEditIcon.name == 'wallpaper')
						{
							model.curToolbarIndex=1;
						}
						else if (model.curEditIcon.name == 'statusbar' || model.curEditIcon.name == 'dock')
						{

							model.curToolbarIndex=0;
						}
						else
						{
							//如果处于 在线应用类型图标状态
							if (model.curOnlineAppIconState == 0)
							{
								model.curToolbarIndex=0;
							}
							//如果处于 在线分类应用图标状态
							else if (model.curOnlineAppIconState == 1)
							{
								model.curToolbarIndex=1;
							}
						}

					});
				//监听在线资源点击事件
				wallpaperAndIconView.wallpaperListView.addEventListener(ListEvent.ITEM_CLICK, function(event:ListEvent):void
					{
						if (model.curEditIcon.name == 'wallpaper')
						{
							LoadingControl.showLoading(picCanvas);
							//在线壁纸
							if (model.curOnlineWallpaperState == 0)
							{
								picCanvas.LoadPictureByUrl(model.PIC_URL + escape(event.itemRenderer.data.pic_fname));
							}
							//关键字壁纸
							else if (model.curOnlineWallpaperState == 1)
							{
								picCanvas.LoadPictureByUrl(model.PIC_URL + escape(event.itemRenderer.data.PicPageUrl) + '&action=getbaidupic');
							}
						}
						else
						{
							picCanvas.LoadPictureByUrl(model.PIC_URL + escape(event.itemRenderer.data.IconUrl1));
						}

					});
				//在线图标类型切换按钮点击事件
				wallpaperAndIconView.iconTypeBtn.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void
					{
						//当前处于应用图标在线资源状态，
						if (model.curOnlineAppIconState == 0)
						{
							//切换到分类图标状态
							model.curOnlineAppIconState=1;
							//当前的图标分类为应用分类
							model.curIconTypeState=1;
							gotoOnlineTheme(true);
						}
						//当前处于分类图标在线资源状态，切换到应用图标状态
						else if (model.curOnlineAppIconState == 1)
						{
							model.curOnlineAppIconState=0;
							gotoOnlineTheme();
						}
					});
				//wallpaperAndIconView初始化后，则根据资源类型初始化界面信息
				wallpaperAndIconView.initBarView();
			}

			/**
			 *	切换到在线图标事件
			 */
			private function goToOnlineThemeHandler(event:MouseEvent):void
			{
				gotoOnlineTheme();
			}

			/**
			 * 进入在线资源入口
			 */
			public function gotoOnlineTheme(isReloadTypeAppIcon:Boolean=false):void
			{
				if (model.curEditIcon.name == 'wallpaper')
				{
					//若wallpaperAndIconView与初始化，则根据资源类型初始化界面信息
					if (wallpaperAndIconView != null && wallpaperAndIconView.wallpaperTypeBtn != null)
					{
						wallpaperAndIconView.initBarView();
					}
					//若wallpaperTypeView与初始化
					model.curToolbarIndex=1;
					//当前展示壁纸分类
					model.curIconTypeState=0;
					//加载壁纸分类
					if (model.wallpaperTypeList == null)
					{
						CairngormEventDispatcher.getInstance().dispatchEvent(new GetIconTypeEvent(GetIconTypeEvent.EVENT_GET_WALLPAPERS_TYPE));
					}
					if (isIconTypeCreationComplete)
					{
						model.iconTypeList=model.wallpaperTypeList;
						iconTypeView.iconTypeInfoText.text='在线壁纸分类';
					}
					model.iconSearchVisible=true;
				}
				else if (model.curEditIcon.name == 'statusbar' || model.curEditIcon.name == 'dock')
				{
					//若wallpaperAndIconView与初始化，则根据资源类型初始化界面信息
					if (wallpaperAndIconView != null && wallpaperAndIconView.wallpaperTypeBtn != null)
					{
						wallpaperAndIconView.initBarView();
					}
					model.curToolbarIndex=2;
					wallpaperAndIconView.sendIconPageRequest(1);
				}
				else
				{
					//若wallpaperAndIconView与初始化，则根据资源类型初始化界面信息
					if (wallpaperAndIconView != null && wallpaperAndIconView.wallpaperTypeBtn != null)
					{
						wallpaperAndIconView.initBarView();
						iconTypeView.iconTypeInfoText.text='应用图标分类';
					}
					//如果处于 在线应用类型图标状态
					if (model.curOnlineAppIconState == 0)
					{
						model.curToolbarIndex=2;
						wallpaperAndIconView.sendIconPageRequest(1);
					}
					//如果处于 在线分类应用图标状态
					else if (model.curOnlineAppIconState == 1)
					{
						//加载分类图标
						if (model.appIconTypeList == null)
						{
							CairngormEventDispatcher.getInstance().dispatchEvent(new GetIconTypeEvent(GetIconTypeEvent.EVENT_GET_APPICON_TYPE));
						}
						if (isReloadTypeAppIcon)
						{
							model.curToolbarIndex=1;
						}
						else
						{
							model.curToolbarIndex=2;
						}
						model.iconTypeList=model.appIconTypeList;
						model.iconSearchVisible=false;
					}

				}
			}
		]]>
	</mx:Script>
	<viewStackEffects:List id="effect"/>
	<mx:ViewStack id="toolbarVS"
				  x="415"
				  y="10"
				  width="125"
				  height="590"
				  borderStyle="solid"
				  cornerRadius="10"
				  borderColor="#000000"
				  selectedIndex="{model.curToolbarIndex}">
		<ndView:Toolbar id="toolbarView"
						hideEffect="effect"
						showEffect="effect"/>
		<ndView:WallpaperTypeBar id="iconTypeView"
								 hideEffect="effect"
								 showEffect="effect"
								 creationComplete="initIconTypeView()"/>
		<ndView:OnlineIconBar id="wallpaperAndIconView"
							  hideEffect="effect"
							  showEffect="effect"
							  creationComplete="initWallpaperAndIconView();"/>
	</mx:ViewStack>
	<ndView:BottomBar id="bottomBarView"
					  x="10"
					  y="615"
					  width="528"
					  height="75"
					  borderStyle="solid"
					  cornerRadius="10"
					  borderColor="#000000"/>
</mx:Canvas>
